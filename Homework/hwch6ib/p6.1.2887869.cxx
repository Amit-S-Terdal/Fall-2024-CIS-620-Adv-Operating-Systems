/*
    Detailed explanation of how ftok() works and its underlying algorithm.
    This program will generate the key and provide a breakdown of each step.
*/

#include <iostream>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/stat.h>
#include <unistd.h>
#include <iomanip>  // For formatting output

using namespace std;

int main() {
    key_t key;
    struct stat fileStat;
    const char* pathname = "."; // Using the current directory as arg1 for ftok
    char proj = 'a';            // You can change this for each proj value (a, b, c, d)

    // Retrieve file stats (arg1 remains same for all proj values)
    if (stat(pathname, &fileStat) < 0) {
        perror("stat failed");
        return 1;
    }

    // Generate key with ftok(arg1, proj)
    key = ftok(pathname, proj);

    // Extract components for formatted output
    int xx = proj;  // xx comes from proj (arg2)
    int yy = fileStat.st_dev & 0xFF;  // yy comes from lower 8 bits of st_dev
    int zzzz = fileStat.st_ino & 0xFFFF;  // zzzz comes from lower 16 bits of st_ino

    // Explanation of ftok's underlying algorithm
    cout << "Explanation of ftok's underlying algorithm:" << endl;
    
    // Step 1: The project identifier
    cout << "1. The project identifier (proj) passed as the second argument to ftok is '" << proj << "' with ASCII value: " 
         << hex << xx << " (hex)." << endl;
    cout << "   This value is placed in the most significant byte (XX) of the generated key.\n" << endl;

    // Step 2: stat() system call info
    cout << "2. The stat() system call is used to retrieve the following information:\n";
    cout << "   - Device ID (st_dev): " << dec << fileStat.st_dev 
         << " (hex: " << hex << setw(2) << setfill('0') << fileStat.st_dev << ")" << endl;
    cout << "   - Inode number (st_ino): " << dec << fileStat.st_ino 
         << " (hex: " << hex << setw(8) << setfill('0') << fileStat.st_ino << ")\n" << endl;

    // Step 3: Least significant byte extraction
    cout << "3. The least significant bytes are extracted from these values to form the rest of the key:\n";
    cout << "   - YY (Least significant 2 bytes of the Device ID): " 
         << setw(2) << setfill('0') << yy << endl;
    cout << "   - ZZZZ (Least significant 4 bytes of the Inode number): " 
         << setw(4) << setfill('0') << (fileStat.st_ino & 0xFFFF) << "\n" << endl;

    // Step 4: Key generation explanation
    cout << "4. The key generated by ftok() combines these components:\n";
    cout << "   ftok(pathname, proj) = XXYYZZZZ" << endl;
    cout << "   Where:" << endl;
    cout << "   - XX = Most significant byte (MSB) from proj ('" << proj << "' -> " 
         << hex << setw(2) << setfill('0') << xx << ")" << endl;
    cout << "   - YY = Least significant 2 bytes from Device ID (st_dev)" << endl;
    cout << "   - ZZZZ = Least significant 4 bytes from Inode number (st_ino)\n" << endl;

    // Display the generated key
    cout << "Generated key by ftok(): [" << hex << setw(8) << setfill('0') << key << "]" << endl;
    

    return 0;
}
